// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Search {
  id          Int           @id @default(autoincrement())
  name        String
  count       Int
  user_search User_Search[]
}

model User_Search {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int    @map("user_id")
  search   Search @relation(fields: [searchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  searchId Int    @map("search_id")
}

enum Role {
  USER
}

model User {
  id               Int                @id @default(autoincrement())
  role             Role               @default(USER)
  name             String?
  email            String             @unique
  password         String
  phone            String?
  address          String?
  shipping_address Shipping_Address[]
  orders           Order[]
  products         Product[]
  user_search      User_Search[]
}

model Shipping_Address {
  id             Int     @id @default(autoincrement())
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  phone          String
  email          String?
  identityNumber String? @map("identity_number")
  company        String?
  branch         String?
  address        String
  apartment      String?
  postalCode     String  @map("postal_code")
  province       String
  district       String
  subDistrict    String  @map("sub_district")
  isMainAddress  Boolean @map("is_main_adderss")
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int     @map("user_id")
}

model Order {
  id             Int             @id @default(autoincrement())
  total          Int             @default(0)
  createdAt      DateTime        @default(now()) @map("created_at")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int             @map("user_id")
  order_products Order_Product[]
  status         Status[]
}

model Order_Product {
  id        Int     @id @default(autoincrement())
  quantity  String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int     @map("order_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

enum OrderStatus {
  UNPAID
  PREPARED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Status {
  id        Int         @id @default(autoincrement())
  status    OrderStatus @default(UNPAID)
  createdAt DateTime    @default(now()) @map("created_at")
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int         @map("order_id")
}

model Product {
  id             Int             @id @default(autoincrement())
  title          String
  price          Int
  detail         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int             @map("user_id")
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId     Int             @map("category_id")
  product_img    Product_Img[]
  order_products Order_Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String?
  products Product[]
}

model Product_Img {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}
